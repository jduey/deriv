#! /home/jim/toccata/new-toc --script

(defprotocol Precedence
  (size [_])
  (prec [_] 4))

(defn bracket [outer expr]
  (assert-result r (instance? List r))

  (cond  (< (prec expr) outer)
         (list "(" (str expr) ")")

         (string-list expr)))

(deftype Add [f g]
  Precedence
  (size [_]
    (+ (size f) (size g)))

  (prec [_]
    1)

  Stringable
  (string-list [a]
    (comp (string-list f)
          (cons " + " (string-list g)))))

(deftype Mul [f g]
  Precedence
  (size [x]
    (+ (size f) (size g)))

  (prec [_]
    2)

  Stringable
  (string-list [_]
    (comp (bracket 2 f)
          (cons "*" (bracket 2 g)))))

(deftype Pow [f g]
  Stringable
  (string-list [_]
    (comp (bracket 2 f)
          (cons "^" (bracket 3 g))))

  Precedence
  (size [x]
    (+ (size f) (size g)))

  (prec [_] 3))

(deftype Ln [expr]
  Stringable
  (string-list [_]
    (comp (cons "ln(" (string-list expr))
          (list ")")))

  Precedence
  (size [_]
    (size expr)))

(defprotocol Stars
  (add* [g f]
    (Add f g))
  
  (add** [_ f g]
    (Add f g))

  (mul* [g f]
    (Mul f g))

  (mul** [_ f g]
    (Mul f g)))

(defprotocol Operations
  (d [f x])

  (add [f g]
    (add* g f))

  (mul [f g]
    (mul* g f))

  (pow [f g]
    (cond (= 0 g) 1
          (= 1 g) f
          (Pow f g)))

  (ln [f]
    (cond (= 1 f) 0
          (Ln f))))

(defn pown [a n]
  (assert (instance? Integer a))
  (assert (instance? Integer n))

  (cond (= 0 n) 1
        (= 1 n) a
          (let [b (pown a (div n 2))
                x (cond (= 0 (rem n 2))
                        1
                        a)]
            (* b b x))))


(extend-type Add
  Operations
  (add [a h]
    (.g a (add (.g a) h)))

  (d [a x]
    (let [f (.f a)
          g (.g a)]
      (Add (d f x) (d g x))))

  Stars
  (add* [g f]
    (add** (.f g) f g)))

(extend-type Mul
  Operations
  (mul [m h]
    (mul (.f m) (mul (.g m) h)))

  (d [m x]
    (let [f (.f m)
          g (.g m)]
      (add (mul f (d g x))
           (mul g (d f x)))))

  Stars
  (mul* [g f]
    (mul** (.f g) f g)))

(extend-type Pow
  Operations
  (d [p x]
    (let [f (.f p)
          g (.g p)]
      (mul (pow f g)
           (add (mul (mul g (d f x)) (.g p -1))
                (mul (ln f) (d g x)))))))


(extend-type Ln
  Operations
  (d [l x]
    (let [expr (.expr l)]
      (mul (d expr x) (pow expr -1)))))

(extend-type String
  Operations
  (d [f x]
    (cond (= f x)
          1
          0))

  Precedence
  (size [_]
    1))

(extend-type Integer
  Operations
  (d [n x]
    0)

  (add [f g]
    (cond (= 0 f) g
          (instance? Integer g) (+ f g)
          (Add f g)))

  (mul [f g]
    (cond (= 1 f) g
          (instance? Integer g) (* f g)
          (Mul f g)))

  (pow [f g]
    (cond (= 0 f) 0
          (instance? Integer g) (pown f g)
          (Pow f g)))

  Precedence
  (size [_]
    1)

  Stars
  (add* [g f]
    (cond (= 0 g) f
          (Add g f)))

  (add** [f-g f g]
    (add f-g (add f (.g g))))

  (mul* [g f]
    (either (= 0 g)
            (mul g f)))

  (mul** [f-g f g]
    (mul f-g (mul f (.g g)))))

(defn show [expr]
  (either (let [sz (size expr)]
            (and (> sz 100)
                 (maybe (str "<<" sz ">>"))))
          (str expr)))

(defn nest [n f x]
  (cond (= 0 n) x
        (nest (dec n) f (f x))))

(defn deriv [f]
  (let [d-prime (d f "x")]
    (println (str "D("
                  (show f)
                  ") = " (show d-prime)))
    d-prime))

(main [[_ depth-str]]
  (nest (str-to-int depth-str)
        deriv (Pow "x" "x")))
